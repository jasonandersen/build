#!/bin/bash
# 
# host-pipeline
#
# This script will setup an Ubuntu host to act as a Dockerized build environment. This
# script requires sudo access and depends on apt-get to install required libraries.
# This script can be run from anywhere in the file system. It will default to creating
# all necessary directories under /apps/pipeline with all applications storing data in
# subdirectories under that directory.
#
# Currently, all containers are configured to mount volumes on directories on the host's
# file system. Eventually, I should change this to data volumes. I just need to wrap my
# head around how to backup those volumes.

echo "********* Starting build environment Docker host setup script *********"

# All environment data will be stored underneath this directory
BASE_DIR="/apps/pipeline"

DOCKER_COMPOSE_VER=1.13.0
JENKINS_DIR=$BASE_DIR/jenkins
SONARQUBE_DIR=$BASE_DIR/sonarqube
SONARQUBE_CONF_DIR=$SONARQUBE_DIR/conf
SONARQUBE_DATA_DIR=$SONARQUBE_DIR/data
SONARQUBE_PLUGINS_DIR=$SONARQUBE_DIR/plugins
SONARQUBE_EXTENSIONS_DIR=$SONARQUBE_DIR/extensions
MYSQL_DIR=$BASE_DIR/mysql/data
NEXUS_DIR=$BASE_DIR/nexus
DOCKER_REGISTRY_DIR=$BASE_DIR/docker/registry
REPO_DIR=$BASE_DIR/repo
INFRASTRUCTURE_DIR=$REPO_DIR/infrastructure
WORK_DIR=$INFRASTRUCTURE_DIR/pipeline
MYSQL_PWD_FILE=$WORK_DIR/secrets/mysql-root-pwd

echo "********* Installing Docker *********"

# Install Docker
sudo apt-get update
sudo apt-get remove docker docker-engine
sudo apt-get install \
        linux-image-extra-$(uname -r) \
        linux-image-extra-virtual
sudo apt-get install \
        apt-transport-https \
        ca-certificates \
        curl \
        software-properties-common
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
sudo apt-get update
sudo apt-get install docker-ce

# Test that Docker installed correctly
sudo docker run hello-world

echo "********* Installing Docker Compose *********"
# Install Docker Compose
# NOTE: I had to hard code the whole Docker Compose url because of permission problems
# downloading directly to /usr/bin. There is probably a better way to do this so might
# need to revisit.
sudo bash -c 'curl -L https://github.com/docker/compose/releases/download/1.13.0/docker-compose-Linux-x86_64 > /usr/bin/docker-compose'
sudo chmod +x /usr/bin/docker-compose
sudo docker-compose --version

echo "********* Installing git & vim *********"

# Install git
sudo apt-get install git

# Install vim
sudo apt-get install vim

# Create directory to house code repository
mkdir -p $REPO_DIR

echo "********* Cloning infrastructure repository *********"
# Clone into git infrastructure repository
mkdir -p $INFRASTRUCTURE_DIR
git clone https://github.com/jasonandersen/infrastructure.git $INFRASTRUCTURE_DIR

echo "********* Building directories to house data from containers *********"
# Create directories for all the build applications to house data on the host system.
mkdir -pv $JENKINS_DIR
mkdir -pv $SONARQUBE_CONF_DIR 
mkdir -pv $SONARQUBE_DATA_DIR
mkdir -pv $SONARQUBE_EXTENSIONS_DIR
mkdir -pv $SONARQUBE_PLUGINS_DIR
mkdir -pv $MYSQL_DIR
mkdir -pv $NEXUS_DIR
mkdir -pv $DOCKER_REGISTRY_DIR

# Nexus requires UID 200 to own the Nexus working directory
sudo chown 200 $NEXUS_DIR

echo "********* Creating Docker Compose environment file *********"
# Create .env file specifically for this host
touch $WORK_DIR/auto.env
echo -e "HOST_CODE_PATH=$REPO_DIR\n" >> $WORK_DIR/auto.env
echo -e "HOST_MYSQL_DATA=$MYSQL_DIR\n" >> $WORK_DIR/auto.env
echo -e "HOST_JENKINS_HOME=$JENKINS_DIR\n" >> $WORK_DIR/auto.env
echo -e "HOST_SONAR_DATA=$SONARQUBE_DATA_DIR\n" >> $WORK_DIR/auto.env
echo -e "HOST_SONAR_CONF=$SONARQUBE_CONF_DIR\n" >> $WORK_DIR/auto.env
echo -e "HOST_SONAR_EXTENSIONS=$SONARQUBE_EXTENSIONS_DIR\n" >> $WORK_DIR/auto.env
echo -e "HOST_SONAR_PLUGINS=$SONARQUBE_PLUGINS_DIR\n" >> $WORK_DIR/auto.env
echo -e "HOST_NEXUS_DATA=$NEXUS_DIR\n" >> $WORK_DIR/auto.env
echo -e "HOST_DOCKER_REGISTRY=$DOCKER_REGISTRY_DIR\n" >> $WORK_DIR/auto.env
echo -e "SONARQUBE_JDBC_USERNAME=sonar\n" >> $WORK_DIR/auto.env
echo -e "SONARQUBE_JDBC_PASSWORD=sonar\n" >> $WORK_DIR/auto.env
mv $WORK_DIR/.env $WORK_DIR/.env.bak
mv $WORK_DIR/auto.env $WORK_DIR/.env

echo "********* Building Docker images *********"
# Run script to build Docker containers 
cd $WORK_DIR
sudo ./build-images

# Ask the user for a MySQL root password
echo ""
echo ""
echo ""
echo "# ******************* Configure MYSQL Root Password ********************* #"
echo "#                                                                         #"
echo "#                                                                         #"
echo "#                                                                         #"
echo "# ******************* Configure MYSQL Root Password ********************* #"
echo ""
echo ""
echo ""
echo "Please enter the password to use as the MYSQL root password:"

read $MYSQL_ROOT_PWD

touch $MYSQL_PWD_FILE
chmod 600 $MYSQL_PWD_FILE
echo $MYSQL_ROOT_PWD >> $MYSQL_PWD_FILE

cd $WORK_DIR
sudo docker-compose up
